(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){let c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);let a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

let area = null;
let view = document.getElementById('view');
document.addEventListener('keydown', function (event) {
  if (event.code == 'KeyE' && (event.ctrlKey || event.metaKey)) {
    editStart();
    event.preventDefault();
  }
});

function editStart() {
  area = document.createElement('textarea');
  area.className = 'event__edit-window';
  area.value = view.innerHTML;
  document.addEventListener('keydown', function (event) {
    if (event.code == 'KeyS' && (event.ctrlKey || event.metaKey)) {
      editEnd();
      event.preventDefault();
    }
  });
  view.replaceWith(area);
  area.focus();
}

function editEnd() {
  view.innerHTML = area.value;
  area.replaceWith(view);
} ////////////////2////////////////////


let table = document.getElementById('table');
table.addEventListener('click', function (event) {
  if (event.target.tagName != 'TH') return;
  let th = event.target;
  sortGrid(th.cellIndex, th.dataset.type);
});

function sortGrid(colNum, type) {
  let tbody = table.querySelector('tbody');
  let rowsArray = Array.from(tbody.rows);
  let compare;

  switch (type) {
    case 'number':
      compare = function compare(rowA, rowB) {
        return rowA.cells[colNum].innerHTML - rowB.cells[colNum].innerHTML;
      };

      break;

    case 'string':
      compare = function compare(rowA, rowB) {
        return rowA.cells[colNum].innerHTML > rowB.cells[colNum].innerHTML ? 1 : -1;
      };

      break;
  }

  rowsArray.sort(compare);
  tbody.append.apply(tbody, _toConsumableArray(rowsArray));
} ////////////////3////////////////////


let element = document.querySelector('.event__element');
let resizer = document.createElement('div');
resizer.className = 'event__resizer';
element.appendChild(resizer);
resizer.addEventListener('mousedown', initResize);

function initResize(e) {
  window.addEventListener('mousemove', Resize);
  window.addEventListener('mouseup', stopResize);
}

function Resize(e) {
  if (e.clientX - element.offsetLeft > 1140) return;
  element.style.width = e.clientX - element.offsetLeft + 'px';
  element.style.height = e.clientY - element.offsetTop + 'px';
}

function stopResize(e) {
  window.removeEventListener('mousemove', Resize);
  window.removeEventListener('mouseup', stopResize);
}

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
