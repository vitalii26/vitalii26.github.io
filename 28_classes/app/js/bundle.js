(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Circle =
/*#__PURE__*/
function () {
  function Circle(radius) {
    _classCallCheck(this, Circle);

    this._radius = radius;
  }

  _createClass(Circle, [{
    key: "circleArea",
    value: function circleArea() {
      return Math.round(Math.pow(this.radius, 2) * Math.PI);
    }
  }, {
    key: "circleLength",
    value: function circleLength() {
      return Math.round(2 * this.radius * Math.PI);
    }
  }, {
    key: "radius",
    get: function get() {
      return this._radius;
    },
    set: function set(a) {
      if (!isNaN(+a) && +a > 0) {
        this._radius = a;
      } else {
        return;
      }
    }
  }, {
    key: "diameter",
    get: function get() {
      return this.radius * 2;
    }
  }]);

  return Circle;
}();

var circle1 = new Circle(12);
circle1.radius = 'fds';
var circleAnswer = document.querySelector('#circleAnswer');
document.querySelector('#getRadiusBtn').addEventListener('click', function () {
  circleAnswer.textContent = "\u0420\u0430\u0434\u0438\u0443\u0441 \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438: ".concat(circle1.radius);
});
document.querySelector('#setRadiusBtn').addEventListener('click', function () {
  circle1.radius = document.querySelector('#setRadius').value;
  circleAnswer.textContent = "\u0420\u0430\u0434\u0438\u0443\u0441 \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438: ".concat(circle1.radius);
});
document.querySelector('#getDiameterBtn').addEventListener('click', function () {
  circleAnswer.textContent = "\u0414\u0438\u0430\u043C\u0435\u0442\u0440 \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438: ".concat(circle1.diameter);
});
document.querySelector('#circleAreaBtn').addEventListener('click', function () {
  circleAnswer.textContent = "\u041F\u043B\u043E\u0449\u0430\u0434\u044C \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438: ".concat(circle1.circleArea());
});
document.querySelector('#circleLengthBtn').addEventListener('click', function () {
  circleAnswer.textContent = "\u0414\u043B\u0438\u043D\u043D\u0430 \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438: ".concat(circle1.circleLength());
}); //////////2///////////////

var Marker =
/*#__PURE__*/
function () {
  function Marker(color, qtyInPercents) {
    _classCallCheck(this, Marker);

    this.color = color;
    this.qtyInPercents = qtyInPercents;
  }

  _createClass(Marker, [{
    key: "print",
    value: function print(text, element) {
      if (text.match(/[^\s]/g).length * 0.5 <= this.qtyInPercents && text.match(/[^\s]/g).length * 0.5 > 0) {
        element.textContent = text;
        element.style.color = "".concat(this.color);
        this.qtyInPercents = +this.qtyInPercents - text.match(/[^\s]/g).length * 0.5;
      }
    }
  }]);

  return Marker;
}();

var RefuelingMarker =
/*#__PURE__*/
function (_Marker) {
  _inherits(RefuelingMarker, _Marker);

  function RefuelingMarker(color, qtyInPercents) {
    _classCallCheck(this, RefuelingMarker);

    return _possibleConstructorReturn(this, _getPrototypeOf(RefuelingMarker).call(this, color, qtyInPercents));
  }

  _createClass(RefuelingMarker, [{
    key: "addFuel",
    value: function addFuel(fuel) {
      if (!isNaN(+fuel) && this.qtyInPercents + +fuel <= 100 && this.qtyInPercents + +fuel >= 0 && +fuel > 0) {
        this.qtyInPercents += +fuel;
      } else {
        return this.qtyInPercents;
      }
    }
  }]);

  return RefuelingMarker;
}(Marker);

var marker2 = new RefuelingMarker('red', 10);
marker2.addFuel(91);
console.log(marker2);
var markerAnswer = document.querySelector('#markerAnswer');
document.querySelector('#markerInfoBtn').addEventListener('click', function () {
  markerAnswer.textContent = "\u0426\u0432\u0435\u0442 \u043C\u0430\u0440\u043A\u0435\u0440\u0430: ".concat(marker2.color, ", \u043E\u0441\u0442\u0430\u043B\u043E\u0441\u044C ").concat(marker2.qtyInPercents, " %.");
});
document.querySelector('#getTextBtn').addEventListener('click', function () {
  var text = document.querySelector('#setText').value;
  marker2.print(text, markerAnswer);
});
document.querySelector('#addFuelBtn').addEventListener('click', function () {
  var fuelValue = document.querySelector('#fuelValue').value;
  marker2.addFuel(fuelValue);
  markerAnswer.textContent = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C ".concat(marker2.qtyInPercents, " %.");
}); //////////3///////////////

var Employee = function Employee(name, age, position, experience) {
  _classCallCheck(this, Employee);

  this.name = name;
  this.age = age;
  this.position = position;
  this.experience = experience;
};

var employees1 = [new Employee('Dom', 56, 'Director', 15), new Employee('Jeff', 24, 'Operator', 2), new Employee('Tiffany', 37, 'Cashier', 7), new Employee('Nick', 42, 'Сollector', 10)];

var EmpTable =
/*#__PURE__*/
function () {
  function EmpTable(employees) {
    _classCallCheck(this, EmpTable);

    this.employees = employees;
  }

  _createClass(EmpTable, [{
    key: "getHTML",
    value: function getHTML() {
      var _this = this;

      var table = document.createElement('table');
      table.classList.add('ar__table');
      document.querySelector("#listAnswer").appendChild(table);
      var tr = document.createElement('tr');
      tr.classList.add('ar__table-tr');
      table.appendChild(tr);
      var th1 = document.createElement('th');
      th1.classList.add('ar__table-header');
      th1.textContent = 'Имя';
      tr.appendChild(th1);
      var th2 = document.createElement('th');
      th2.classList.add('ar__table-header');
      th2.textContent = 'Возраст';
      tr.appendChild(th2);
      var th3 = document.createElement('th');
      th3.classList.add('ar__table-header');
      th3.textContent = 'Должность';
      tr.appendChild(th3);
      var th4 = document.createElement('th');
      th4.classList.add('ar__table-header');
      th4.textContent = 'Опыт';
      tr.appendChild(th4);
      this.employees.forEach(function (element) {
        _this.name = element.name;
        _this.age = element.age;
        _this.position = element.position;
        _this.experience = element.experience;
        var tr = document.createElement('tr');
        tr.classList.add('ar__table-tr');
        table.appendChild(tr);
        var td1 = document.createElement('td');
        td1.classList.add('ar__table-cell');
        td1.textContent = "".concat(_this.name);
        tr.appendChild(td1);
        var td2 = document.createElement('td');
        td2.classList.add('ar__table-cell');
        td2.textContent = "".concat(_this.age);
        tr.appendChild(td2);
        var td3 = document.createElement('td');
        td3.classList.add('ar__table-cell');
        td3.textContent = "".concat(_this.position);
        tr.appendChild(td3);
        var td4 = document.createElement('td');
        td4.classList.add('ar__table-cell');
        td4.textContent = "".concat(_this.experience);
        tr.appendChild(td4);
      });
    }
  }]);

  return EmpTable;
}();

console.log(employees1);
var vit = new EmpTable(employees1);
vit.getHTML();

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
