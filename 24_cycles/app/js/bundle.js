(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var sumBtn = document.querySelector('#sum__button');
sumBtn.addEventListener('click', function () {
  var sumNum1 = document.querySelector('#sumNum1').value;
  var sumNum2 = document.querySelector('#sumNum2').value;
  var totalSum = 0;

  if (+sumNum1 <= +sumNum2) {
    for (var i = +sumNum1; i <= +sumNum2; i++) {
      totalSum += i;
    }
  } else {
    for (var j = +sumNum2; j <= +sumNum1; j++) {
      totalSum += j;
    }
  }

  document.querySelector('#sum__out').textContent = "\u0421\u0443\u043C\u043C\u0430 \u0447\u0438\u0441\u0435\u043B \u0432 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0435: ".concat(totalSum, ".");
}); // ============2============

var divisorBtn = document.querySelector('#divisor__button');
divisorBtn.addEventListener('click', function () {
  var divisorNum1 = document.querySelector('#divisorNum1').value;
  var divisorNum2 = document.querySelector('#divisorNum2').value;

  while (+divisorNum1 !== 0) {
    divisorNum1 = +divisorNum2 % (divisorNum2 = divisorNum1);
  }

  document.querySelector('#divisor__out').textContent = "\u041D\u0430\u0438\u0431\u043E\u043B\u044C\u0448\u0438\u0439 \u043E\u0431\u0449\u0438\u0439 \u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C: ".concat(divisorNum2, ".");
}); // ============3============

var divisor = '';
var resultBtn = document.querySelector('#result__button');
resultBtn.addEventListener('click', function () {
  var number1 = document.querySelector('#number1').value;

  for (var i = 1; i <= number1; i++) {
    if (number1 % i == 0) {
      divisor += i + '  ';
    }
  }

  document.querySelector('#result__out').textContent = "\u0414\u0435\u043B\u0438\u0442\u0435\u043B\u0438 \u0447\u0438\u0441\u043B\u0430: ".concat(divisor, ".");
}); // ============4============

var amountBtn = document.querySelector('#amount__button');
amountBtn.addEventListener('click', function () {
  var checkNumber = document.querySelector('#checkNumber').value;
  var amount = checkNumber.length;

  if (checkNumber < 0) {
    amount = checkNumber.length - 1;
  }

  document.querySelector('#amount__out').textContent = "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0446\u0438\u0444\u0440 \u0447\u0438\u0441\u043B\u0430: ".concat(amount, ".");
}); // ============5============

var countBtn = document.querySelector('#count__button');
countBtn.addEventListener('click', function () {
  var numbers = document.querySelector('#numbers').value;
  var numbersArr = numbers.split(',');
  console.log(numbersArr);
  var negative = 0;
  var positive = 0;
  var zero = 0;
  var even = 0;
  var odd = 0;

  for (var i = 0; i < numbersArr.length; i++) {
    if (isNaN(+numbersArr[i])) {
      document.querySelector('#count__out').textContent = "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043B\u0430.";
      return;
    }

    if (+numbersArr[i] == 0) {
      zero++;
    } else if (+numbersArr[i] > 0) {
      positive++;
    } else {
      negative++;
    }

    if (+numbersArr[i] % 2 == 0) {
      even++;
    } else {
      odd++;
    }
  }

  document.querySelector('#count__out').textContent = "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B: ".concat(positive, ", \u043D\u0435\u0433\u0430\u0442\u0438\u0432\u043D\u044B\u0445: ").concat(negative, ", \u043D\u0443\u043B\u0435\u0439: ").concat(zero, ", \u0447\u0435\u0442\u043D\u044B\u0445: ").concat(even, ", \u043D\u0435\u0447\u0435\u0442\u043D\u044B\u0445: ").concat(odd, ".");
}); // ============6============
// let calcquestion = document.querySelector('#calcquestion').value;

var question = 0;

while (question) {
  var calcBtn = document.querySelector('#calc__button');
  calcBtn.addEventListener('click', function () {
    var calcNum1 = document.querySelector('#calcNum1').value;
    var calcNum2 = document.querySelector('#calcNum2').value;
    var operator = document.querySelector('#operator').value;
    var calcOut = 0;

    switch (operator) {
      case '+':
        calcOut = +calcNum1 + +calcNum2;
        break;

      case '-':
        calcOut = calcNum1 - calcNum2;
        break;

      case '*':
        calcOut = calcNum1 * calcNum2;
        break;

      case '/':
        calcOut = calcNum1 / calcNum2;
        break;

      default:
        alert("Не корректная операция");
    }

    console.log(calcOut);
    document.querySelector('#calc__out').textContent = "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442: ".concat(calcOut, ".");
  });
  question = confirm('Хотите ли вы решить ещё один пример?');
} // let question = true;
// while(question) {
// let calcNum1 = +prompt(`Задайте первое число`, '');
// let operator = prompt(`Задайте знак`, '');
// let calcNum2 = +prompt(`Задайте второе число`, '');
// switch(operator){
// case "+" : alert(calcNum1 + calcNum2);  break;
// case "-" : alert(calcNum1 - calcNum2);  break;
// case "*" : alert(calcNum1 * calcNum2);  break;
// case "/" : alert(calcNum1 / calcNum2);  break;
//  default : alert("Не корректная операция");
// }
// question = confirm('Хотите ли вы решить ещё один пример?');
// }
// // ============7============
// let unshiftedNumber = prompt(`Задайте число, которое вы хотите сдвинуть`, '');
// let shift = +prompt(`На сколько цифр его сдвинуть?`, '');
// let shiftedNumber = '';
// for (let i = shift; i < unshiftedNumber.length; i++) {
// 	shiftedNumber += unshiftedNumber[i];
// }
// for (let i = 0; i < shift; i++) {
// 	shiftedNumber += unshiftedNumber[i];
// }
// alert(`Полученное число: ${shiftedNumber}`);
// // ============8============
// let question2 = true;
// const weekDays = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'];
// for (let i = 0; i < weekDays.length; i++) {
// 	if (question2) {
// 	question2 = confirm('День недели: ' + weekDays[i] + '. Вы хотите увидеть следующий день?');
// 	}  else {
// 		break;
// 	}
// }
// // ============9============
// let table = '';
// for (let i = 2; i <= 9; i++) {
// 	for (let j = 1; j <= 10; j++) {
// 		table +=(`${i}*${j}=${i*j}  `);
// 	}
// }
// alert(table);
// // ============10============
// let selectedNumber = +prompt(`Введите число от 0 до 100`, '');
// let MiddleNumber = 50;
// let lastNumber = 100;
// let firstNumber = 0;
// while (MiddleNumber !== selectedNumber) {
// 	MiddleNumber = Math.round(firstNumber +((lastNumber - firstNumber)/ 2));
// 	let userSym = prompt(`Ваше число > ${MiddleNumber}, < ${MiddleNumber} или == ${MiddleNumber}? Введите символ > или < или ==`, '');
// 	if (userSym === '>') {
// 		firstNumber =  MiddleNumber;
// 	} else if (userSym === '<') {
// 		lastNumber =  MiddleNumber;
// 	} else if (userSym === '==') {
// 		if (MiddleNumber === selectedNumber) {
// 			alert(`Вы загадали число ${MiddleNumber}!`);
// 			break;
// 		} else {
// 			alert(`Вы загадали не это число55!`);
// 		}
// 	} else {
// 		alert("Не корректная операция");
// 		break;
// 	}
// }
/////////////////////////////
// let num1 = +prompt('Задайте начальное число диапазона', '');
// let num2 = +prompt('Задайте конечное число диапазона', '');
// let sum1 = 0;
// if (num1 <= num2) {
// 	for (let i = num1; i <= num2; i++) {
// 		sum1 += i;
// 	}
// } else {
// 	for (let j = num2; j <= num1; j++) {
// 		sum1 += j;
// 	}
// }
// alert(`Сумма: ${sum1}`);
/////////////////////////////////////
// let divisorNum1 = +prompt('Задайте первое число', '');
// let divisorNum2 = +prompt('Задайте второе число', '');
// 	while (divisorNum1 !== 0) {
// 		divisorNum1 = divisorNum2 % (divisorNum2 = divisorNum1);
// 	}
// 	alert(divisorNum2);
/////////////////////////////////////
// let number = +prompt('Задайте число у которого нужно найти делители', '');
// let divisor = '';
// for (let i = 1; i <= number; i++) {
// 	if(number % i == 0) {
// 		divisor += i + ', ';
// 	}
// }
// alert(`Делители числа: ${divisor}`);
/////////////////////////////////
// let checkNumber = prompt('Введите число', '');
// alert(`Количество цифр во введенном числе: ${checkNumber.length}`);
/////////////////////////////////
// let numbers = [];
// let negative = 0;
// let positive = 0;
// let zero = 0;
// let even = 0;
// let odd = 0;
// for (let i = 0; i < 10; i++) {
// 	numbers[i] = prompt(`Задайте ${i + 1} число`, '');
// 	if (numbers[i] == 0) {
// 		zero++;
// 	} else if (numbers[i] > 0) {
// 		positive++;
// 	} else {
// 		negative++;
// 	}
// 	if ((numbers[i] % 2) == 0) {
// 		even++;
// 	} else {
// 		odd++;
// 	}
// }
// alert(`Количество положительных чисел: ${positive}, негативных: ${negative}, нулей: ${zero}, четных: ${even}, нечетных: ${odd}.`);
//////////////////////////////////

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
