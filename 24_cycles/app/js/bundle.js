(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var num1 = +prompt('Задайте начальное число диапазона', '');
var num2 = +prompt('Задайте конечное число диапазона', '');
var sum1 = 0;

if (num1 <= num2) {
  for (var i = num1; i <= num2; i++) {
    sum1 += i;
  }
} else {
  for (var j = num2; j <= num1; j++) {
    sum1 += j;
  }
}

alert("\u0421\u0443\u043C\u043C\u0430: ".concat(sum1)); // ============2============

var divisorNum1 = +prompt('Задайте первое число', '');
var divisorNum2 = +prompt('Задайте второе число', '');

while (divisorNum1 !== 0) {
  divisorNum1 = divisorNum2 % (divisorNum2 = divisorNum1);
}

alert(divisorNum2); // ============3============

var number = +prompt('Задайте число у которого нужно найти делители', '');
var divisor = '';

for (var _i = 1; _i <= number; _i++) {
  if (number % _i == 0) {
    divisor += _i + ', ';
  }
}

alert("\u0414\u0435\u043B\u0438\u0442\u0435\u043B\u0438 \u0447\u0438\u0441\u043B\u0430: ".concat(divisor)); // ============4============

var checkNumber = prompt('Введите число', '');
alert("\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0446\u0438\u0444\u0440 \u0432\u043E \u0432\u0432\u0435\u0434\u0435\u043D\u043D\u043E\u043C \u0447\u0438\u0441\u043B\u0435: ".concat(checkNumber.length)); // ============5============

var numbers = [];
var negative = 0;
var positive = 0;
var zero = 0;
var even = 0;
var odd = 0;

for (var _i2 = 0; _i2 < 10; _i2++) {
  numbers[_i2] = prompt("\u0417\u0430\u0434\u0430\u0439\u0442\u0435 ".concat(_i2 + 1, " \u0447\u0438\u0441\u043B\u043E"), '');

  if (numbers[_i2] == 0) {
    zero++;
  } else if (numbers[_i2] > 0) {
    positive++;
  } else {
    negative++;
  }

  if (numbers[_i2] % 2 == 0) {
    even++;
  } else {
    odd++;
  }
}

alert("\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\u043B: ".concat(positive, ", \u043D\u0435\u0433\u0430\u0442\u0438\u0432\u043D\u044B\u0445: ").concat(negative, ", \u043D\u0443\u043B\u0435\u0439: ").concat(zero, ", \u0447\u0435\u0442\u043D\u044B\u0445: ").concat(even, ", \u043D\u0435\u0447\u0435\u0442\u043D\u044B\u0445: ").concat(odd, ".")); // ============6============

var question = true;

while (question) {
  var calcNum1 = +prompt("\u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u043F\u0435\u0440\u0432\u043E\u0435 \u0447\u0438\u0441\u043B\u043E", '');
  var operator = prompt("\u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0437\u043D\u0430\u043A", '');
  var calcNum2 = +prompt("\u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0432\u0442\u043E\u0440\u043E\u0435 \u0447\u0438\u0441\u043B\u043E", '');

  switch (operator) {
    case "+":
      alert(calcNum1 + calcNum2);
      break;

    case "-":
      alert(calcNum1 - calcNum2);
      break;

    case "*":
      alert(calcNum1 * calcNum2);
      break;

    case "/":
      alert(calcNum1 / calcNum2);
      break;

    default:
      alert("Не корректная операция");
  }

  question = confirm('Хотите ли вы решить ещё один пример?');
} // ============7============


var unshiftedNumber = prompt("\u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u0447\u0438\u0441\u043B\u043E, \u043A\u043E\u0442\u043E\u0440\u043E\u0435 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0441\u0434\u0432\u0438\u043D\u0443\u0442\u044C", '');
var shift = +prompt("\u041D\u0430 \u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0446\u0438\u0444\u0440 \u0435\u0433\u043E \u0441\u0434\u0432\u0438\u043D\u0443\u0442\u044C?", '');
var shiftedNumber = '';

for (var _i3 = shift; _i3 < unshiftedNumber.length; _i3++) {
  shiftedNumber += unshiftedNumber[_i3];
}

for (var _i4 = 0; _i4 < shift; _i4++) {
  shiftedNumber += unshiftedNumber[_i4];
}

alert("\u041F\u043E\u043B\u0443\u0447\u0435\u043D\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E: ".concat(shiftedNumber)); // ============8============

var question2 = true;
var weekDays = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'];

for (var _i5 = 0; _i5 < weekDays.length; _i5++) {
  if (question2) {
    question2 = confirm('День недели: ' + weekDays[_i5] + '. Вы хотите увидеть следующий день?');
  } else {
    break;
  }
} // ============9============


var table = '';

for (var _i6 = 2; _i6 <= 9; _i6++) {
  for (var _j = 1; _j <= 10; _j++) {
    table += "".concat(_i6, "*").concat(_j, "=").concat(_i6 * _j, "  ");
  }
}

alert(table); // ============10============

var selectedNumber = +prompt("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043B\u043E \u043E\u0442 0 \u0434\u043E 100", '');
var MiddleNumber = 50;
var lastNumber = 100;
var firstNumber = 0;

while (MiddleNumber !== selectedNumber) {
  MiddleNumber = Math.round(firstNumber + (lastNumber - firstNumber) / 2);
  var userSym = prompt("\u0412\u0430\u0448\u0435 \u0447\u0438\u0441\u043B\u043E > ".concat(MiddleNumber, ", < ").concat(MiddleNumber, " \u0438\u043B\u0438 == ").concat(MiddleNumber, "? \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0438\u043C\u0432\u043E\u043B > \u0438\u043B\u0438 < \u0438\u043B\u0438 =="), '');

  if (userSym === '>') {
    firstNumber = MiddleNumber;
  } else if (userSym === '<') {
    lastNumber = MiddleNumber;
  } else if (userSym === '==') {
    if (MiddleNumber === selectedNumber) {
      alert("\u0412\u044B \u0437\u0430\u0433\u0430\u0434\u0430\u043B\u0438 \u0447\u0438\u0441\u043B\u043E ".concat(MiddleNumber, "!"));
      break;
    } else {
      alert("\u0412\u044B \u0437\u0430\u0433\u0430\u0434\u0430\u043B\u0438 \u043D\u0435 \u044D\u0442\u043E \u0447\u0438\u0441\u043B\u043E55!");
    }
  } else {
    alert("Не корректная операция");
    break;
  }
}

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
